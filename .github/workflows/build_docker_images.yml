name: build_docker_images
on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  TAGS: |
    type=sha
    type=ref,event=branch

jobs: 
  cancel-previous:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
    
  build_server:
    name: Build server
    runs-on: ubuntu-22.04

    container: docker:20.10.12-alpine3.15
    
    steps: 
      - uses: actions/checkout@v2
      
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install utilities
        # yq is used to parse stack resolver version from stack.yaml file
        run: apk add --no-cache yq curl tar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Stack cache
        uses: actions/cache@v2
        with:
          path: server/cache
          key: stack_deps_cache_${{ runner.os }}_${{ hashFiles('server/stack.yaml', 'server/stack.yaml.lock', 'server/package.yaml') }}
          restore-keys: stack_deps_cache_${{ runner.os }}_

      - name: Build artifacts image
        run: |
          docker build -f server/Dockerfile.artifacts -t artifacts server

      - name: Save stack depenencies cache
        run: |
          id=$(docker create artifacts)
          docker cp $id:/root/stack_dependencies_cache.tar.gz - > ./server/cache/stack_dependencies_cache.tar.gz.tar

      - name: Replace the existing generated code with just generated one
          # Note: we could also do it via docker, 
          # but it will require anyone to build backend-artifacts before building the frontend
          # which will take 20-40 minutes.
        run: |
          id=$(docker create artifacts)
          rm -rf client/src/Api
          docker cp $id:/client/src/Api - > client/src/Api.tar
          tar -xf client/src/Api.tar -C client/src
          rm client/src/Api.tar

      - name: Prepare tags and labels (server)
        id: meta-server
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/vv90/contest-viewer-server
          tags: ${{ env.TAGS }}

      - name: Build and push Docker image (server)
        uses: docker/build-push-action@v3
        with: 
          context: server
          file: server/Dockerfile
          push: true
          tags: ${{ steps.meta-server.outputs.tags}}
          labels: ${{ steps.meta-server.outputs.labels}}

      - name: Prepare tags and labels (client)
        id: meta-client
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/vv90/contest-viewer-client
          tags: ${{ env.TAGS }}

      - name: Build and push Docker image (client)
        uses: docker/build-push-action@v3
        with:
          context: client
          file: client/Dockerfile
          push: true
          tags: ${{ steps.meta-client.outputs.tags }}
          labels: ${{ steps.meta-client.outputs.labels }}