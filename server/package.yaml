name:                server
version:             0.1.0.0
github:              "githubuser/server"
license:             BSD3
author:              "Author name here"
maintainer:          "example@example.com"
copyright:           "2022 Author name here"

# Complete list: https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/control.html
language: GHC2021



extra-source-files:
- README.md
- ChangeLog.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/githubuser/server#readme>


default-extensions:
  #
  # Note on Monomorphism Restriction:
  # - Суть: ограничивает полиморфизм для ВСЕХ определений,
  #   для которых не указана сигнатур типов и которые не "выглядят как функции" (не имеют связывания слева от = )
  # - Неудобство: приводит к неинтуитивным результатам вывода типов – менее полиморфным, чем ожидалось
  # - Удобство: увеличивает производительность и уменьшает использование памяти
  #   Подробнее – здесь: https://www.youtube.com/watch?v=zpBua3Mql18
  # - Присутствует в спецификации Haskell, а не просто в GHC
  # - Отключен по умолчанию в GHC 9.4 (через NoMonomorphismRestriction)
  # - Но включен по умолчанию в наборе расширений GHC2021 (через MonomorphismRestriction)
  # - Вместо того, чтобы отключать monomorphism restriction посредством `NoMonomorphismRestriction`,
  #   мы пользуемся включенным ворнингом `Wmonomorphism-restriction` (включён в `Weverything`),
  #   и ворнинг заставляет нас расставлять сигнатуры типов там, где monomorphism restriction применяется.
  #   И в процессе расстановки типов мы уже решаем, оставить там полиморфизм или конкретный тип,
  #   и поведение всегда будет ожидаемым.
  #
  - NoImplicitPrelude # Note: Ради Relude
  - NoPolyKinds # Note: Ломает инстансы Elm для параметризованных типов. Не очень-то и хотелось, RolyPolyKinds
  - DataKinds
  - DeriveAnyClass
  - DerivingStrategies
  - DerivingVia
  - DuplicateRecordFields
  - LambdaCase
  - OverloadedRecordDot
  - OverloadedStrings


ghc-options:
  # Use up to 8 cores for compilation https://ghc.gitlab.haskell.org/ghc/doc/users_guide/using.html?highlight=j#ghc-flag--j[%E2%9F%A8n%E2%9F%A9]
  - -j8
    # Set up rts options for GHC itself https://ghc.gitlab.haskell.org/ghc/doc/users_guide/runtime_control.html#setting-rts-options
  - +RTS -A32m -RTS
    # Optimization level:
    # -O0 produces a non-optimized binary (significantly reduces Seq performance), but builds fast.
    # -O2 produces a heavily optimized binary, but builds ~ 2 times slower.
    # Note: Stack reuses existing binaries instead of rebuilding if the source code hasn't changed.
    # We build optimized binaries by default and turn optimizations off by `--fast` flag.
  - -O2
    # Enables local documentation
  - -haddock
    # Enable all possible warnings as errors (Werror is provided manually in dockerfile for production builds and CI)
  - -Weverything
    # Complains about imported functions
  - -Wno-all-missed-specialisations
    # Complains about imported functions
  - -Wno-missed-specialisations
    # Requires signatures for all local definitions
  - -Wno-missing-local-signatures
    # Requires explicitly list exports for all modules
  - -Wno-missing-export-lists
    # Requires to mark unsafe modules as unsafe
  - -Wno-unsafe
    # Requires separate lists of dependencies per executable. But can really catch some unused packages.
  - -Wno-unused-packages
    # Requires kind signature for every newtype.
  - -Wno-missing-kind-signatures
    # A lot of modules modules are still not "safe haskell".
  - -Wno-missing-safe-haskell-mode
    # Requires import lists for all record fields and all value constructors
  - -Wno-missing-import-lists

dependencies:
- base >= 4.7 && < 5
 # an alternative to Prelude
- relude
# for json encoding/decoding
- aeson
# for serving api
- servant-server
- servant-multipart
- servant-websockets
- conduit
- conduit-extra
# for api server configuration
- wai
- wai-cors
- warp
- http-types
# for multithreading
- stm
- async
- stm-chans
- stm-conduit
# monad transformer library
- mtl
- monad-logger
# for efficient strings
- text
# for composing strings
- fmt
# for UTCTime
- time
# heap data structure
# - heap
# for database interaction
- hasql
- hasql-th
- hasql-transaction
- profunctors
- vector
# data structures like IntMap, IntSet, Graph, etc.
# - containers
# statically checked physical dimensions
# - dimensional
# Parser combinators
- parsec
# Geographical Position Calculations
- jord
# for working with binary data
- binary
# for elm codegen
- haskell-to-elm
- elm-syntax
- generics-sop
# for elm codegen
- process
# for elm codegen
- prettyprinter
# for elm codegen
- unordered-containers
# for elm codegen
- filepath
# for elm codegen
- directory

library:
  source-dirs: src

executables:
  server-exe:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    # - base
    - server

  codegen-exe: 
    main: Main.hs
    source-dirs: codegen
    dependencies: 
    - server
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N

  seed-exe: 
    main: Main.hs
    source-dirs: seed

    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N

    dependencies:
    # - base
    - server

tests:
  server-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    # - base
    - server
    - hspec
    - hspec-wai
    - hspec-wai-json
    - aeson
